from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

import asyncio
import json

from rasp import get_rasp_week, get_group_id

TOKEN = "YOUR_TOKEN"
bot = Bot(token=TOKEN)
dp = Dispatcher()

USERS_FILE = "users.json"

def load_users():
    #–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_users(users):
    #–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

users = load_users()

async def send_main_menu(message: types.Message):
    #–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = [
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")],
    ]
    markup = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in users:
        await message.answer(f"‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {users[user_id]}")
        await send_main_menu(message)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–µ–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")

@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")

@dp.message(lambda message: message.text.isdigit())
async def set_group(message: types.Message):
    user_id = str(message.from_user.id)
    group_id = get_group_id(message.text)

    if group_id:
        users[user_id] = message.text
        save_users(users)
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {message.text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        await send_main_menu(message)
    else:
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def send_schedule(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É!")
        return

    group_name = users[user_id]
    schedule = get_rasp_week(group_name)

    if not schedule:
        await message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for day, data in schedule.items():
        text = f"üìÖ {day} ({data['date']}):\n" + "\n".join(data["lessons"])
        await message.answer(text)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
