import asyncio
import json
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardRemove
from rasp import get_week_schedule, get_group_id

API_TOKEN = "YOUR_API_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open("users.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(data):
    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users = load_users()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")]
    ],
    resize_keyboard=True
)

# –°–ª–æ–≤–∞—Ä—å –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
WEEKDAYS = {
    1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    2: "–í—Ç–æ—Ä–Ω–∏–∫",
    3: "–°—Ä–µ–¥–∞",
    4: "–ß–µ—Ç–≤–µ—Ä–≥",
    5: "–ü—è—Ç–Ω–∏—Ü–∞",
    6: "–°—É–±–±–æ—Ç–∞",
    7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_day_schedule(day, lessons):
    date = lessons[0]['–¥–∞—Ç–∞']
    text = f"üìÖ {WEEKDAYS[day]} ‚Äî {date}\n\n"  # ‚Üê –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    for lesson in lessons:
        start = lesson['–Ω–∞—á–∞–ª–æ']
        end = lesson['–∫–æ–Ω–µ—Ü']
        room = lesson['–∞—É–¥–∏—Ç–æ—Ä–∏—è']
        subject = lesson['–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']
        teacher = lesson['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']
        text += f"üïí {start}‚Äì{end} (–∞—É–¥: {room})\nüìö {subject}\nüë§ {teacher}\n\n"
    return text.strip()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in users:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:")
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
@dp.message(F.text.regexp(r"^[\w\-]+$"))
async def group_input(message: Message):
    user_id = str(message.from_user.id)
    group_name = message.text.strip()

    if not get_group_id(group_name):
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    users[user_id] = group_name
    save_users(users)

    await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {group_name}", reply_markup=main_kb)

# –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É
@dp.message(F.text == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É")
async def change_group(message: Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardRemove())

# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@dp.message(F.text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def get_schedule(message: Message):
    user_id = str(message.from_user.id)

    if user_id not in users:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.")
        return

    group = users[user_id]
    data = get_week_schedule(group)

    if data is None:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –≥–¥–µ –µ—Å—Ç—å –ø–∞—Ä—ã
    non_empty_days = {day: lessons for day, lessons in data.items() if lessons}

    if not non_empty_days:
        await message.answer("‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer("–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é üìö:")

    for day, lessons in non_empty_days.items():
        msg = format_day_schedule(day, lessons)
        await message.answer(msg)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
